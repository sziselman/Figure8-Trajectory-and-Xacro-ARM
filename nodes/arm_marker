#!/usr/bin/env python
""" 
Publishes markers at the position of the end-effector that last for T/5 seconds.
If the x-position of the end-effector is positive, then the marker is a periwinkle sphere.
If the x-position of the end-effector is negative, then the marker is a lavender cube.

PUBLISHERS:
  + arm_markers (visualization_msgs/Marker) ~ the marker to be published to rviz
PARAMETERS:
  + length1 (float) ~ the length of link1
  + length2 (float) ~ the length of link2
  + T (float) ~ the period
"""

import rospy
import math
from rospy.exceptions import ROSInterruptException
from geometry_msgs.msg import Vector3
import tf2_ros
from visualization_msgs.msg import Marker

class ArmMarker:
    def __init__(self):
        # parameters
        self.len2 = rospy.get_param("length2")
        self.len1 = rospy.get_param("length1")
        self.T = rospy.get_param("arm_period")

        #subs, pubs, servs, etc.
        self.buffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.buffer)
        self.vis_pub = rospy.Publisher("arm_markers", Marker, queue_size=10)
        self.tmr = rospy.Timer(rospy.Duration(0.1), self.timer_callback)
        self.id = 0

        # variables

    def timer_callback(self, event):
        """
        The timer_callback() function
        """
        # checks to see if a transform is available
        try:
            t = self.buffer.lookup_transform('base_link', 'end_effector', rospy.Time())
            
            x = t.transform.translation.x
            y = t.transform.translation.y
            
            # crerate the marker to be published
            marker = Marker()
            marker.header.frame_id = "base_link"
            marker.header.stamp = rospy.Time.now()
            marker.ns = "marker_namespace"
            marker.id = self.id
            marker.action = 0 # add
            marker.pose.position = Vector3(x, y, 0.0)
            marker.pose.orientation.x = 0.0
            marker.pose.orientation.y = 0.0
            marker.pose.orientation.z = 0.0
            marker.pose.orientation.w = 1.0
            marker.scale = Vector3(0.15, 0.15, 0.15)
            marker.color.a = 1.0

            # if positive, then publish periwinkle sphere
            if x >= 0.0:
                marker.type = 2 # sphere
                marker.color.r = 195/255
                marker.color.g = 205/255
                marker.color.b = 230/255
            # if negative, then publish a lavender cube
            else:
                marker.type = 1 #cube
                marker.color.r = 204/255
                marker.color.g = 169/255
                marker.color.b = 221/225

            # set the lifetime to be T/5 seconds
            marker.lifetime = rospy.Duration.from_sec(self.T/5)

            self.vis_pub.publish(marker)
            self.id += 1
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            pass
        return

def main():
    """ the main() function """
    rospy.init_node('arm_marker')
    arm_marker = ArmMarker()
    rospy.spin()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass
